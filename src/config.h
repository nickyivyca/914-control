#pragma once

#include "mbed.h"




// Number of 6813 chips on isospi bus
#ifndef NUM_CHIPS
#define NUM_CHIPS 6
#endif

// Nominal range of the LEM sensor
#ifndef ISENSE_RANGE
#define ISENSE_RANGE 200.0
#endif

// Chip number for where the LEM is plugged in, 0 indexed
#ifndef ISENSE_LOCATION
#define ISENSE_LOCATION 5
#endif

#ifndef CELL_SENSE_FREQUENCY
#define CELL_SENSE_FREQUENCY 10
#endif

#ifndef CELL_SENSE_FREQUENCY_CHARGE
#define CELL_SENSE_FREQUENCY_CHARGE 2
#endif

#ifndef MAIN_PERIOD
#define MAIN_PERIOD 50
#endif

// #ifndef TESTBALANCE
// #define TESTBALANCE
// #endif

/*#ifndef DEBUGN
#define DEBUGN
#endif*/

// Number of cells per chip
#ifndef NUM_CELLS_PER_CHIP
#define NUM_CELLS_PER_CHIP 14
#endif

const int BMS_CELL_MAP[18] = {0, 1, 2, 3, 4, -1, 5, 6, 7, 8, 9, -1, 10, 11, 12, 13, -1, -1};

enum thread_message {INIT_ALL, NEW_CELL_DATA, BATT_ERR, BATT_STARTUP, CHARGE_ENABLED, // to main
  BMS_INIT, BMS_READ, ENABLE_BALANCING, DISABLE_BALANCING, // to bms thread
  DATA_INIT, DATA_DATA, DATA_SUMMARY, DATA_ERR};    // to data thread

// Value for 100% on the bar on the display
#ifndef DISP_FULL_SCALE
#define DISP_FULL_SCALE 80000
#endif

// Divide out for 20 characters width
#ifndef DISP_PER_BOX
#define DISP_PER_BOX (DISP_FULL_SCALE/20)
#endif



// Upper threshold when fault will be thrown for cell voltage
//
// Units: millivolts
#ifndef BMS_FAULT_VOLTAGE_THRESHOLD_HIGH
#define BMS_FAULT_VOLTAGE_THRESHOLD_HIGH 4150
#endif

// Lower threshold when fault will be thrown for cell voltage
//
// Units: millivolts
#ifndef BMS_FAULT_VOLTAGE_THRESHOLD_LOW
#define BMS_FAULT_VOLTAGE_THRESHOLD_LOW 3000
#endif

#ifndef BMS_SOC_RESERVE_THRESHOLD
#define BMS_SOC_RESERVE_THRESHOLD 18
#endif

// Threshold when cells will be discharged when discharging is enabled.
//
// Units: millivolts
#ifndef BMS_DISCHARGE_THRESHOLD
#define BMS_DISCHARGE_THRESHOLD 10
#endif

// Overtemp threshold
#ifndef BMS_TEMPERATURE_THRESHOLD
#define BMS_TEMPERATURE_THRESHOLD 42 // cell datasheet gives charging range up to 45C
#endif

const uint16_t SoC_lookup[102] = {
3341,
3364,
3378,
3392,
3409,
3415,
3421,
3430,
3439,
3446,
3455,
3464,
3473,
3481,
3488,
3495,
3502,
3509,
3515,
3521,
3527,
3532,
3537,
3542,
3546,
3550,
3554,
3558,
3561,
3566,
3571,
3575,
3579,
3583,
3589,
3593,
3597,
3601,
3605,
3609,
3612,
3614,
3619,
3621,
3624,
3630,
3635,
3640,
3646,
3652,
3657,
3662,
3667,
3673,
3679,
3686,
3692,
3698,
3704,
3713,
3721,
3729,
3738,
3749,
3759,
3768,
3777,
3789,
3800,
3809,
3820,
3831,
3843,
3853,
3864,
3876,
3889,
3900,
3912,
3925,
3937,
3948,
3960,
3973,
3985,
3997,
4009,
4021,
4033,
4045,
4057,
4070,
4081,
4093,
4107,
4120,
4133,
4148,
4165,
4182,
4199,
4200 // 101%
};

const uint32_t mc_lookup[102] = {
0,
942658,
1881608,
2816466,
3746807,
4675490,
5602520,
6527148,
7449437,
8369813,
9287718,
10203166,
11116232,
12027246,
12936431,
13843806,
14749378,
15653168,
16555392,
17456169,
18355464,
19253284,
20149853,
21045248,
21939496,
22832796,
23725148,
24616579,
25507140,
26396590,
27284814,
28171813,
29057974,
29942988,
30826644,
31709373,
32591177,
33471988,
34351665,
35230495,
36108619,
36986039,
37862487,
38738303,
39613314,
40486998,
41359358,
42230606,
43100469,
43968860,
44836080,
45702133,
46566920,
47430410,
48292483,
49152997,
50011956,
50869614,
51725796,
52580016,
53432374,
54282876,
55131312,
55977255,
56820980,
57662629,
58502210,
59339116,
60173724,
61006447,
61836706,
62664515,
63489816,
64312944,
65133736,
65951889,
66767419,
67580666,
68391383,
69199365,
70004968,
70808205,
71609012,
72407249,
73203047,
73996479,
74787559,
75576225,
76362624,
77146712,
77928336,
78707511,
79484536,
80259306,
81031497,
81801297,
82568722,
83333269,
84094729,
84853129,
85608491,
86400000
};
