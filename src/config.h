#pragma once

#include "mbed.h"




// Number of 6813 chips on isospi bus
#ifndef NUM_CHIPS
#define NUM_CHIPS 6
#endif

// Nominal range of the LEM sensor
#ifndef ISENSE_RANGE
#define ISENSE_RANGE 200.0
#endif

// Chip number for where the LEM is plugged in, 0 indexed
#ifndef ISENSE_LOCATION
#define ISENSE_LOCATION 5
#endif

#ifndef CELL_SENSE_FREQUENCY
#define CELL_SENSE_FREQUENCY 10
#endif

#ifndef CELL_SENSE_FREQUENCY_CHARGE
#define CELL_SENSE_FREQUENCY_CHARGE 2
#endif

#ifndef MAIN_PERIOD
#define MAIN_PERIOD 10
#endif

#ifndef TESTBALANCE
#define TESTBALANCE
#endif

/*#ifndef DEBUGN
#define DEBUGN
#endif*/

// Number of cells per chip
#ifndef NUM_CELLS_PER_CHIP
#define NUM_CELLS_PER_CHIP 14
#endif

const int BMS_CELL_MAP[18] = {0, 1, 2, 3, 4, -1, 5, 6, 7, 8, 9, -1, 10, 11, 12, 13, -1, -1};

enum thread_message {INIT_ALL, NEW_CELL_DATA, BATT_ERR, BATT_STARTUP, CHARGE_ENABLED, // to main
  BMS_INIT, BMS_READ, ENABLE_BALANCING, DISABLE_BALANCING, // to bms thread
  DATA_INIT, DATA_DATA, DATA_SUMMARY, DATA_ERR};    // to data thread

// Value for 100% on the bar on the display
#ifndef DISP_FULL_SCALE
#define DISP_FULL_SCALE 80000
#endif

// Divide out for 20 characters width
#ifndef DISP_PER_BOX
#define DISP_PER_BOX (DISP_FULL_SCALE/20)
#endif



// Upper threshold when fault will be thrown for cell voltage
//
// Units: millivolts
#ifndef BMS_FAULT_VOLTAGE_THRESHOLD_HIGH
#define BMS_FAULT_VOLTAGE_THRESHOLD_HIGH 4150
#endif

// Lower threshold when fault will be thrown for cell voltage
//
// Units: millivolts
#ifndef BMS_FAULT_VOLTAGE_THRESHOLD_LOW
#define BMS_FAULT_VOLTAGE_THRESHOLD_LOW 3000
#endif

// Threshold when cells will be discharged when discharging is enabled.
//
// Units: millivolts
#ifndef BMS_DISCHARGE_THRESHOLD
#define BMS_DISCHARGE_THRESHOLD 10
#endif

// Overtemp threshold
#ifndef BMS_TEMPERATURE_THRESHOLD
#define BMS_TEMPERATURE_THRESHOLD 42 // cell datasheet gives charging range up to 45C
#endif

const uint16_t SoC_lookup[102] = {
3341,
3364,
3386,
3407,
3421,
3429,
3436,
3446,
3447,
3448,
3456,
3464,
3472,
3481,
3488,
3495,
3502,
3509,
3515,
3521,
3527,
3532,
3537,
3542,
3546,
3550,
3554,
3558,
3561,
3566,
3571,
3575,
3579,
3583,
3589,
3593,
3597,
3601,
3605,
3609,
3612,
3614,
3619,
3621,
3624,
3630,
3635,
3640,
3646,
3652,
3657,
3662,
3667,
3673,
3679,
3686,
3692,
3698,
3704,
3713,
3721,
3729,
3738,
3749,
3759,
3768,
3777,
3789,
3800,
3809,
3820,
3831,
3843,
3853,
3864,
3876,
3889,
3900,
3912,
3925,
3937,
3948,
3960,
3973,
3985,
3997,
4009,
4021,
4033,
4045,
4057,
4070,
4081,
4093,
4107,
4120,
4133,
4148,
4165,
4182,
4199,
4200 // 101%
};

const uint32_t mc_lookup[102] = {
0,
942658,
1879357,
2810080,
3737058,
4662077,
5585145,
6505391,
7425329,
8345137,
9262786,
10178284,
11091681,
12002872,
12912057,
13819431,
14725004,
15628794,
16531018,
17431794,
18331090,
19228910,
20125478,
21020873,
21915122,
22808421,
23700774,
24592205,
25482766,
26372216,
27260439,
28147438,
29033599,
29918613,
30802269,
31684999,
32566803,
33447614,
34327291,
35206121,
36084245,
36961665,
37838113,
38713929,
39588940,
40462624,
41334983,
42206232,
43076095,
43944485,
44811706,
45677759,
46542546,
47406036,
48268109,
49128622,
49987582,
50845240,
51701422,
52555642,
53408000,
54258502,
55106938,
55952881,
56796606,
57638255,
58477836,
59314742,
60149350,
60982073,
61812332,
62640141,
63465442,
64288570,
65109362,
65927515,
66743045,
67556292,
68367009,
69174991,
69980594,
70783831,
71584638,
72382875,
73178673,
73972105,
74763185,
75551851,
76338250,
77122338,
77903962,
78683137,
79460162,
80234932,
81007123,
81776923,
82544348,
83308895,
84070355,
84828755,
85584117,
86400000
};